/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ShipmentTracking {
  export type CheckpointStruct = {
    label: string;
    latE6: BigNumberish;
    lngE6: BigNumberish;
    timestamp: BigNumberish;
  };

  export type CheckpointStructOutput = [
    label: string,
    latE6: bigint,
    lngE6: bigint,
    timestamp: bigint
  ] & { label: string; latE6: bigint; lngE6: bigint; timestamp: bigint };
}

export interface ShipmentTrackingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCheckpoint"
      | "addManager"
      | "addToWhitelist"
      | "addToWhitelistBatch"
      | "assignShipment"
      | "collectedFees"
      | "createShipment"
      | "feeEnabled"
      | "getCheckpoint"
      | "getCheckpointCount"
      | "getCheckpoints"
      | "getCollectedFees"
      | "getShipment"
      | "getShipmentCount"
      | "managers"
      | "owner"
      | "removeFromWhitelist"
      | "removeManager"
      | "setShipmentFee"
      | "shipmentFee"
      | "toggleFee"
      | "toggleWhitelist"
      | "updateStatus"
      | "whitelistEnabled"
      | "whitelistedCustomers"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CheckpointAdded"
      | "CustomerRemovedFromWhitelist"
      | "CustomerWhitelisted"
      | "FeeToggled"
      | "FeesWithdrawn"
      | "ManagerAdded"
      | "ManagerRemoved"
      | "ShipmentAssigned"
      | "ShipmentCreated"
      | "ShipmentFeeUpdated"
      | "StatusUpdated"
      | "WhitelistToggled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCheckpoint",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelistBatch",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assignShipment",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createShipment",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpoint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpointCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShipment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShipmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShipmentFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shipmentFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toggleFee", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "toggleWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedCustomers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelistBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpointCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShipmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShipmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shipmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedCustomers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CheckpointAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    label: string,
    latE6: BigNumberish,
    lngE6: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    label: string,
    latE6: bigint,
    lngE6: bigint
  ];
  export interface OutputObject {
    id: bigint;
    label: string;
    latE6: bigint;
    lngE6: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomerRemovedFromWhitelistEvent {
  export type InputTuple = [customer: AddressLike];
  export type OutputTuple = [customer: string];
  export interface OutputObject {
    customer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomerWhitelistedEvent {
  export type InputTuple = [customer: AddressLike];
  export type OutputTuple = [customer: string];
  export interface OutputObject {
    customer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeToggledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentAssignedEvent {
  export type InputTuple = [
    id: BigNumberish,
    manager: AddressLike,
    driverName: string,
    vehiclePlate: string
  ];
  export type OutputTuple = [
    id: bigint,
    manager: string,
    driverName: string,
    vehiclePlate: string
  ];
  export interface OutputObject {
    id: bigint;
    manager: string;
    driverName: string;
    vehiclePlate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    customer: AddressLike,
    productName: string,
    origin: string,
    destination: string
  ];
  export type OutputTuple = [
    id: bigint,
    customer: string,
    productName: string,
    origin: string,
    destination: string
  ];
  export interface OutputObject {
    id: bigint;
    customer: string;
    productName: string;
    origin: string;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    newStatus: BigNumberish,
    actor: AddressLike
  ];
  export type OutputTuple = [id: bigint, newStatus: bigint, actor: string];
  export interface OutputObject {
    id: bigint;
    newStatus: bigint;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistToggledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShipmentTracking extends BaseContract {
  connect(runner?: ContractRunner | null): ShipmentTracking;
  waitForDeployment(): Promise<this>;

  interface: ShipmentTrackingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCheckpoint: TypedContractMethod<
    [id: BigNumberish, label: string, latE6: BigNumberish, lngE6: BigNumberish],
    [void],
    "nonpayable"
  >;

  addManager: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  addToWhitelist: TypedContractMethod<
    [customer: AddressLike],
    [void],
    "nonpayable"
  >;

  addToWhitelistBatch: TypedContractMethod<
    [customers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  assignShipment: TypedContractMethod<
    [id: BigNumberish, driverName: string, vehiclePlate: string],
    [void],
    "nonpayable"
  >;

  collectedFees: TypedContractMethod<[], [bigint], "view">;

  createShipment: TypedContractMethod<
    [productName: string, origin: string, destination: string],
    [bigint],
    "payable"
  >;

  feeEnabled: TypedContractMethod<[], [boolean], "view">;

  getCheckpoint: TypedContractMethod<
    [id: BigNumberish, index: BigNumberish],
    [[string, bigint, bigint, bigint]],
    "view"
  >;

  getCheckpointCount: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  getCheckpoints: TypedContractMethod<
    [id: BigNumberish],
    [ShipmentTracking.CheckpointStructOutput[]],
    "view"
  >;

  getCollectedFees: TypedContractMethod<[], [bigint], "view">;

  getShipment: TypedContractMethod<
    [id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint
      ]
    ],
    "view"
  >;

  getShipmentCount: TypedContractMethod<[], [bigint], "view">;

  managers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromWhitelist: TypedContractMethod<
    [customer: AddressLike],
    [void],
    "nonpayable"
  >;

  removeManager: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  setShipmentFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  shipmentFee: TypedContractMethod<[], [bigint], "view">;

  toggleFee: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  toggleWhitelist: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  updateStatus: TypedContractMethod<
    [id: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  whitelistEnabled: TypedContractMethod<[], [boolean], "view">;

  whitelistedCustomers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCheckpoint"
  ): TypedContractMethod<
    [id: BigNumberish, label: string, latE6: BigNumberish, lngE6: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addManager"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[customer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToWhitelistBatch"
  ): TypedContractMethod<[customers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignShipment"
  ): TypedContractMethod<
    [id: BigNumberish, driverName: string, vehiclePlate: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createShipment"
  ): TypedContractMethod<
    [productName: string, origin: string, destination: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCheckpoint"
  ): TypedContractMethod<
    [id: BigNumberish, index: BigNumberish],
    [[string, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCheckpointCount"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCheckpoints"
  ): TypedContractMethod<
    [id: BigNumberish],
    [ShipmentTracking.CheckpointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollectedFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getShipment"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getShipmentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[customer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeManager"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShipmentFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shipmentFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleFee"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleWhitelist"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStatus"
  ): TypedContractMethod<
    [id: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistedCustomers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CheckpointAdded"
  ): TypedContractEvent<
    CheckpointAddedEvent.InputTuple,
    CheckpointAddedEvent.OutputTuple,
    CheckpointAddedEvent.OutputObject
  >;
  getEvent(
    key: "CustomerRemovedFromWhitelist"
  ): TypedContractEvent<
    CustomerRemovedFromWhitelistEvent.InputTuple,
    CustomerRemovedFromWhitelistEvent.OutputTuple,
    CustomerRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "CustomerWhitelisted"
  ): TypedContractEvent<
    CustomerWhitelistedEvent.InputTuple,
    CustomerWhitelistedEvent.OutputTuple,
    CustomerWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "FeeToggled"
  ): TypedContractEvent<
    FeeToggledEvent.InputTuple,
    FeeToggledEvent.OutputTuple,
    FeeToggledEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ManagerAdded"
  ): TypedContractEvent<
    ManagerAddedEvent.InputTuple,
    ManagerAddedEvent.OutputTuple,
    ManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRemoved"
  ): TypedContractEvent<
    ManagerRemovedEvent.InputTuple,
    ManagerRemovedEvent.OutputTuple,
    ManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentAssigned"
  ): TypedContractEvent<
    ShipmentAssignedEvent.InputTuple,
    ShipmentAssignedEvent.OutputTuple,
    ShipmentAssignedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentCreated"
  ): TypedContractEvent<
    ShipmentCreatedEvent.InputTuple,
    ShipmentCreatedEvent.OutputTuple,
    ShipmentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentFeeUpdated"
  ): TypedContractEvent<
    ShipmentFeeUpdatedEvent.InputTuple,
    ShipmentFeeUpdatedEvent.OutputTuple,
    ShipmentFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StatusUpdated"
  ): TypedContractEvent<
    StatusUpdatedEvent.InputTuple,
    StatusUpdatedEvent.OutputTuple,
    StatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistToggled"
  ): TypedContractEvent<
    WhitelistToggledEvent.InputTuple,
    WhitelistToggledEvent.OutputTuple,
    WhitelistToggledEvent.OutputObject
  >;

  filters: {
    "CheckpointAdded(uint256,string,int32,int32)": TypedContractEvent<
      CheckpointAddedEvent.InputTuple,
      CheckpointAddedEvent.OutputTuple,
      CheckpointAddedEvent.OutputObject
    >;
    CheckpointAdded: TypedContractEvent<
      CheckpointAddedEvent.InputTuple,
      CheckpointAddedEvent.OutputTuple,
      CheckpointAddedEvent.OutputObject
    >;

    "CustomerRemovedFromWhitelist(address)": TypedContractEvent<
      CustomerRemovedFromWhitelistEvent.InputTuple,
      CustomerRemovedFromWhitelistEvent.OutputTuple,
      CustomerRemovedFromWhitelistEvent.OutputObject
    >;
    CustomerRemovedFromWhitelist: TypedContractEvent<
      CustomerRemovedFromWhitelistEvent.InputTuple,
      CustomerRemovedFromWhitelistEvent.OutputTuple,
      CustomerRemovedFromWhitelistEvent.OutputObject
    >;

    "CustomerWhitelisted(address)": TypedContractEvent<
      CustomerWhitelistedEvent.InputTuple,
      CustomerWhitelistedEvent.OutputTuple,
      CustomerWhitelistedEvent.OutputObject
    >;
    CustomerWhitelisted: TypedContractEvent<
      CustomerWhitelistedEvent.InputTuple,
      CustomerWhitelistedEvent.OutputTuple,
      CustomerWhitelistedEvent.OutputObject
    >;

    "FeeToggled(bool)": TypedContractEvent<
      FeeToggledEvent.InputTuple,
      FeeToggledEvent.OutputTuple,
      FeeToggledEvent.OutputObject
    >;
    FeeToggled: TypedContractEvent<
      FeeToggledEvent.InputTuple,
      FeeToggledEvent.OutputTuple,
      FeeToggledEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "ManagerAdded(address)": TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;
    ManagerAdded: TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;

    "ManagerRemoved(address)": TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;
    ManagerRemoved: TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;

    "ShipmentAssigned(uint256,address,string,string)": TypedContractEvent<
      ShipmentAssignedEvent.InputTuple,
      ShipmentAssignedEvent.OutputTuple,
      ShipmentAssignedEvent.OutputObject
    >;
    ShipmentAssigned: TypedContractEvent<
      ShipmentAssignedEvent.InputTuple,
      ShipmentAssignedEvent.OutputTuple,
      ShipmentAssignedEvent.OutputObject
    >;

    "ShipmentCreated(uint256,address,string,string,string)": TypedContractEvent<
      ShipmentCreatedEvent.InputTuple,
      ShipmentCreatedEvent.OutputTuple,
      ShipmentCreatedEvent.OutputObject
    >;
    ShipmentCreated: TypedContractEvent<
      ShipmentCreatedEvent.InputTuple,
      ShipmentCreatedEvent.OutputTuple,
      ShipmentCreatedEvent.OutputObject
    >;

    "ShipmentFeeUpdated(uint256)": TypedContractEvent<
      ShipmentFeeUpdatedEvent.InputTuple,
      ShipmentFeeUpdatedEvent.OutputTuple,
      ShipmentFeeUpdatedEvent.OutputObject
    >;
    ShipmentFeeUpdated: TypedContractEvent<
      ShipmentFeeUpdatedEvent.InputTuple,
      ShipmentFeeUpdatedEvent.OutputTuple,
      ShipmentFeeUpdatedEvent.OutputObject
    >;

    "StatusUpdated(uint256,uint8,address)": TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;
    StatusUpdated: TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;

    "WhitelistToggled(bool)": TypedContractEvent<
      WhitelistToggledEvent.InputTuple,
      WhitelistToggledEvent.OutputTuple,
      WhitelistToggledEvent.OutputObject
    >;
    WhitelistToggled: TypedContractEvent<
      WhitelistToggledEvent.InputTuple,
      WhitelistToggledEvent.OutputTuple,
      WhitelistToggledEvent.OutputObject
    >;
  };
}
